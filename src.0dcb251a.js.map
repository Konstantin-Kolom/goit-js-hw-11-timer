{"version":3,"sources":["js/them.js","index.js"],"names":["refs","clockTimerDay","document","querySelector","clockTimerHours","clockTimerMins","clockTimerSecs","endTime","targetDate","Date","Timer","timer","start","startTime","console","log","setInterval","currentTime","now","deltaTime","days","hours","mins","secs","getTimeComponents","updateClockTimer","stopUpdateClockTimer","textContent","pad","value","String","padStart","time","Math","floor"],"mappings":";;;AACA,MAAMA,EAAO,CACVC,cAAeC,SAASC,cAAc,uBACtCC,gBAAiBF,SAASC,cAAc,wBACxCE,eAAgBH,SAASC,cAAc,uBACvCG,eAAgBJ,SAASC,cAAc,wBAGpCI,EAAS,CACbC,WAAY,IAAIC,KAAK,0BAIvB,MAAMC,GAIN,MAAMC,EAAQ,CACXC,QACSC,MAAAA,EAAYN,EAAQC,WAC1BM,QAAQC,IAAIF,GAEZG,YAAY,KACHC,MAAAA,EAAcR,KAAKS,MACnBC,GAAyC,GAA5BF,EAAcJ,IAC3B,KAAEO,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,GAASC,EAAkBL,GAClDF,IAAgBJ,GAKpBY,EAAiB,CAAEL,KAAAA,EAAMC,MAAAA,EAAOC,KAAAA,EAAMC,KAAAA,IACtCT,QAAQC,OAAOK,KAAQC,KAASC,KAAQC,MALrCG,KAMH,OAOT,SAASD,GAAiB,KAAEL,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC5CvB,EAAKC,cAAc0B,eAAiBP,IACpCpB,EAAKI,gBAAgBuB,eAAiBN,IACtCrB,EAAKK,eAAesB,eAAiBL,IACrCtB,EAAKM,eAAeqB,eAAiBJ,IAGxC,SAASG,IACN1B,EAAKC,cAAc0B,YAAe,KAClC3B,EAAKI,gBAAgBuB,YAAe,KACpC3B,EAAKK,eAAesB,YAAe,KACnC3B,EAAKM,eAAeqB,YAAe,KAMtC,SAASC,EAAIC,GACHC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAIpC,SAASP,EAAkBQ,GAKjB,MAAA,CAAEZ,KAJIQ,EAAIK,KAAKC,MAAMF,EAAQ,QAIrBX,MAHDO,EAAIK,KAAKC,MAAOF,EAAQ,MAAyB,OAGzCV,KAFTM,EAAMK,KAAKC,MAAOF,EAAQ,KAAoB,MAE/BT,KADfK,EAAIK,KAAKC,MAAOF,EAAQ,IAAc,OA7BtDrB,EAAMC;;AClCN,aAHA,QAAA,+CACA,QAAA,oBAEA,QAAA","file":"src.0dcb251a.js","sourceRoot":"../src","sourcesContent":["// Переменные\nconst refs = {\n   clockTimerDay: document.querySelector('[data-value=\"days\"]'),\n   clockTimerHours: document.querySelector('[data-value=\"hours\"]'),\n   clockTimerMins: document.querySelector('[data-value=\"mins\"]'),\n   clockTimerSecs: document.querySelector('[data-value=\"secs\"]'),\n};\n\nconst endTime ={\n  targetDate: new Date('Jul 22, 2021, 8:10:00'),\n};\n\n// Счетсик\nclass Timer {\n   \n};\n\nconst timer = {\n   start() {\n      const startTime = endTime.targetDate;\n      console.log(startTime);\n\n      setInterval(() => {\n         const currentTime = Date.now();\n         const deltaTime = (currentTime - startTime) * -1;\n         const { days, hours, mins, secs } = getTimeComponents(deltaTime);\n         if (currentTime === startTime) {\n            stopUpdateClockTimer()\n            return \n          };\n         \n         updateClockTimer({ days, hours, mins, secs })\n         console.log(`${days}:${hours}:${mins}:${secs}`);\n      }, 1000);\n   }\n}\n\ntimer.start()\n\n// Вывод в HTML \nfunction updateClockTimer({ days, hours, mins, secs }) {\n   refs.clockTimerDay.textContent = `${days}`\n   refs.clockTimerHours.textContent = `${hours}`\n   refs.clockTimerMins.textContent = `${mins}`\n   refs.clockTimerSecs.textContent = `${secs}`\n};\n\nfunction stopUpdateClockTimer() {\n   refs.clockTimerDay.textContent = `00`\n   refs.clockTimerHours.textContent = `00`\n   refs.clockTimerMins.textContent = `00`\n   refs.clockTimerSecs.textContent = `00`\n};\n\n\n\n// Добавляет 0 - приводит к выводу значения 00\nfunction pad(value) {\n   return String(value).padStart(2, '0');\n};\n\n// Просчет времени - пересчет милисекунд\nfunction getTimeComponents(time) {\n   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n   const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n   const mins = pad  (Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n   return { days, hours, mins, secs };\n};\n\n\n\n///////////\n// new CountdownTimer({\n//   selector: '#timer-1',\n//   targetDate: new Date('Jul 17, 2019'),\n// });\n\n\n","import '../node_modules/normalize.css/normalize.css'\nimport './sass/main.scss'\n\nimport './js/them.js'\n\n\n\n\n\n\n"]}